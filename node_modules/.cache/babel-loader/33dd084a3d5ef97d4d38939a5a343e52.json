{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Zac/Sysbox/SHM_React/shm-react/my-app/components/ItemDetails/RegistrationDetails/RegistrationFields.js\";\nimport React, { Component } from 'react';\nimport Colors from \"../../../constants/Colors\";\nimport { Button, TextArea, ActionSheet, Switch, Radio, Cells, CellsTitle, Cell, CellHeader, CellBody, CellFooter, Form, FormCell, Input, Label } from 'react-weui';\n\nvar RegistrationFields =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegistrationFields, _Component);\n\n  function RegistrationFields(props) {\n    var _this;\n\n    _classCallCheck(this, RegistrationFields);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegistrationFields).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"initFormTemplate\", function () {\n      var tmpConfig = JSON.parse(_this.state.config);\n      var tmpFormValues = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(tmpConfig.inputFields), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var field = _step.value;\n          tmpFormValues.push({\n            'title': field.title,\n            'value': ''\n          });\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      console.log(tmpFormValues);\n\n      _this.setState({\n        formValues: tmpFormValues\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"extractFieldsFromConfig\", function () {\n      var tmpConfig = JSON.parse(_this.state.config);\n\n      _this.setState({\n        inputFields: tmpConfig.inputFields ? tmpConfig.inputFields : undefined\n      }, function () {\n        _this.initFormTemplate();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      var formValues = _this.state.formValues;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(formValues), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var formValue = _step2.value;\n\n          if (formValue.title === event.target.name) {\n            formValue.value = event.target.value;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      _this.setState({\n        formArray: formValues\n      }, function () {\n        _this.state.callbackUpdateForm(_this.state.formArray);\n      });\n    });\n\n    _this.state = {\n      callbackUpdateForm: _this.props.callbackUpdateForm,\n      config: _this.props.item.config,\n      isParticipated: _this.props.isParticipated,\n      formValues: {},\n      formArray: []\n    };\n    return _this;\n  }\n\n  _createClass(RegistrationFields, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.extractFieldsFromConfig();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      this.setState({\n        isParticipated: nextProps.isParticipated\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          inputFields = _this$state.inputFields,\n          isParticipated = _this$state.isParticipated;\n\n      if (inputFields && inputFields.length > 0 && !isParticipated) {\n        return React.createElement(\"div\", {\n          style: styles.formWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, inputFields.map(function (field, index) {\n          var type = field.type,\n              title = field.title;\n          return React.createElement(\"div\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, React.createElement(CellsTitle, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, field.title), React.createElement(Form, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, React.createElement(FormCell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }, React.createElement(CellBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, type === 'input' ? React.createElement(Input, {\n            type: \"text\",\n            name: title,\n            onChange: _this2.handleChange,\n            placeholder: '请输入' + title,\n            style: styles.inputField,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }) : React.createElement(TextArea, {\n            rows: \"3\",\n            name: title,\n            style: styles.inputField,\n            onChange: _this2.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          })))));\n        }));\n      } else return null;\n    }\n  }]);\n\n  return RegistrationFields;\n}(Component);\n\nvar styles = {\n  formWrapper: {\n    backgroundColor: Colors.formBackground\n  },\n  inputField: {\n    fontSize: '14px'\n  }\n};\nexport default RegistrationFields;","map":{"version":3,"sources":["/Users/Zac/Sysbox/SHM_React/shm-react/my-app/components/ItemDetails/RegistrationDetails/RegistrationFields.js"],"names":["React","Component","Colors","Button","TextArea","ActionSheet","Switch","Radio","Cells","CellsTitle","Cell","CellHeader","CellBody","CellFooter","Form","FormCell","Input","Label","RegistrationFields","props","tmpConfig","JSON","parse","state","config","tmpFormValues","inputFields","field","push","title","console","log","setState","formValues","undefined","initFormTemplate","event","formValue","target","name","value","formArray","callbackUpdateForm","item","isParticipated","extractFieldsFromConfig","nextProps","nextContext","length","styles","formWrapper","map","index","type","handleChange","inputField","backgroundColor","formBackground","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Colors from \"../../../constants/Colors\"\nimport { Button, TextArea, ActionSheet, Switch, Radio, Cells, CellsTitle, Cell, CellHeader, CellBody, CellFooter, Form, FormCell, Input, Label } from 'react-weui'\n\nclass RegistrationFields extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            callbackUpdateForm: this.props.callbackUpdateForm,\n            config: this.props.item.config,\n            isParticipated: this.props.isParticipated,\n            formValues: {},\n            formArray: []\n        }\n    }\n\n    componentDidMount() {\n        this.extractFieldsFromConfig()\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.setState({\n            isParticipated: nextProps.isParticipated\n        })\n    }\n\n    initFormTemplate = () => {\n        let tmpConfig = JSON.parse(this.state.config)\n        let tmpFormValues = []\n        for (let field of tmpConfig.inputFields) {\n            tmpFormValues.push({\n                'title': field.title,\n                'value': ''\n            })\n        }\n        console.log(tmpFormValues)\n        this.setState({\n            formValues: tmpFormValues\n        })\n    }\n\n    extractFieldsFromConfig = () => {\n        let tmpConfig = JSON.parse(this.state.config)\n        this.setState({\n            inputFields: tmpConfig.inputFields ? tmpConfig.inputFields : undefined\n        }, ()=> {\n            this.initFormTemplate()\n        })\n    }\n\n    handleChange = event => {\n        let { formValues } = this.state\n        for (let formValue of formValues) {\n            if (formValue.title === event.target.name) {\n                formValue.value = event.target.value\n            }\n        }\n        this.setState({\n            formArray: formValues\n        }, ()=>{\n            this.state.callbackUpdateForm(this.state.formArray)\n        })\n    }\n\n\n    render(){\n        const { inputFields, isParticipated } = this.state\n        if (inputFields && inputFields.length > 0 && !isParticipated) {\n            return (\n                <div style={styles.formWrapper}>\n                    {\n                        inputFields.map((field, index) => {\n                            let { type, title } = field\n                            return (\n                                <div key={ index } >\n                                    <CellsTitle>{ field.title }</CellsTitle>\n                                    <Form>\n                                        <FormCell>\n                                            <CellBody>\n                                                {\n                                                    type === 'input' ?\n                                                        <Input\n                                                            type=\"text\"\n                                                            name={ title }\n                                                            onChange={ this.handleChange }\n                                                            placeholder={ '请输入' + title }\n                                                            style={ styles.inputField }/>\n                                                        :\n                                                        <TextArea rows=\"3\"\n                                                                  name={ title }\n                                                                  style={ styles.inputField }\n                                                                  onChange={ this.handleChange }/>\n                                                }\n                                            </CellBody>\n                                        </FormCell>\n                                    </Form>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }\n        else return null\n    }\n}\n\nconst styles = {\n    formWrapper: {\n        backgroundColor: Colors.formBackground\n    },\n    inputField: {\n        fontSize: '14px'\n    }\n}\n\nexport default RegistrationFields\n\n"]},"metadata":{},"sourceType":"module"}