{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { Button, Toast } from \"react-weui\";\nimport Lang from \"../../lang/Lang\";\nimport React from \"react\";\nimport { IoIosStar } from \"react-icons/io\";\nimport { Config } from \"../../Config\";\nimport AuthService from \"../../service/AuthService\";\nimport Modal from 'react-modal';\nimport CompanyService from \"../../service/CompanyService\";\nimport UtilsService from \"../../service/UtilsService\";\n\nvar SubscribeBtn =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SubscribeBtn, _React$Component);\n\n  function SubscribeBtn(props) {\n    var _this;\n\n    _classCallCheck(this, SubscribeBtn);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SubscribeBtn).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getLoginStatus\", function () {\n      if (_this.state.subscribeLoginLogId) {\n        AuthService.checkLoginStatus(_this.state.subscribeLoginLogId || null).then(function (response) {\n          return response.text();\n        }).then(function (resp) {\n          var res = JSON.parse(resp);\n\n          if (res.log && res.log.tmp_token && res.log.tmp_token.trim() !== '') {\n            _this.setState({\n              loading: true\n            });\n\n            _this.loginWithTempCode(res.log.tmp_token.trim());\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loginWithTempCode\", function (tmpToken) {\n      AuthService.loginWithTempCode(tmpToken).then(function (response) {\n        return response.text();\n      }).then(function (resp) {\n        var res = JSON.parse(resp);\n\n        if (res.return_code) {\n          localStorage.setItem('userToken', res.return_code);\n          localStorage.setItem('isLogIn', true);\n        }\n\n        var params = {};\n        AuthService.getMe(params).then(function (response) {\n          return response.json();\n        }).then(function (responseJson) {\n          localStorage.setItem('userObject', _JSON$stringify(responseJson));\n        }).then(function () {\n          location.reload();\n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"subscribe\", function (company, item) {\n      var user = JSON.parse(localStorage.getItem('userObject')); // user = {\n      //     wechat_is_subscriber: true\n      // }\n\n      if (!user) {\n        if (UtilsService.openedInWeChat()) {\n          _this.weChatLogin();\n        } else {\n          var getLoginStatus = _this.getLoginStatus;\n          var params = {\n            companyId: company.id,\n            itemId: item && item.id\n          };\n          AuthService.getLoginSubscribeQrCode(params).then(function (response) {\n            return response.text();\n          }).then(function (resp) {\n            var res = JSON.parse(resp);\n            var interval = setInterval(getLoginStatus, 1000);\n\n            _this.setState({\n              qrUrl: res.qrcode,\n              subscribeLoginLogId: res.subscribeLoginLogId,\n              showModal: true,\n              interval: interval\n            });\n          });\n        }\n      } else {\n        if (user.wechat_is_subscriber) {\n          _this.setState({\n            loading: true\n          }, function () {\n            CompanyService.subscribeCompany(company.id).then(function (res) {\n              _this.setState({\n                loading: false,\n                success: true\n              });\n\n              _this.state.toastTimer = setTimeout(function () {\n                _this.setState({\n                  success: false\n                });\n              }, 2000);\n            });\n          });\n        } else {\n          _this.getQrCode(item, company); // this.setState({\n          //     showModal: true\n          // })\n\n        }\n      }\n    });\n\n    _this.state = {\n      showModal: false\n    };\n    return _this;\n  }\n\n  _createClass(SubscribeBtn, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount(props) {// this.getQrCode(this.props.item, this.props.company)\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.state.interval);\n    }\n  }, {\n    key: \"weChatLogin\",\n    value: function weChatLogin() {\n      var origUrl = window.location.href;\n      var authUrl = Config.webAddress + 'AuthPage';\n      AuthService.wechatLogin(origUrl, authUrl, {}).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        window.open(responseJson.auth_url, \"_self\");\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n  }, {\n    key: \"getQrCode\",\n    value: function getQrCode(item, company) {\n      var _this2 = this;\n\n      var params = {};\n\n      if (item && item.id) {\n        params = {\n          itemId: item.id\n        };\n      }\n\n      var companyId = company.id;\n      CompanyService.getCompanyQrCode(companyId, params).then(function (response) {\n        return response.text();\n      }).then(function (response) {\n        _this2.setState({\n          qrUrl: response,\n          showModal: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var customStyles = {\n        content: {\n          top: '50%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          marginRight: '-50%',\n          transform: 'translate(-50%, -50%)'\n        }\n      }; // const company = this.props.company;\n\n      return React.createElement(\"div\", null, React.createElement(Button, {\n        size: \"small\",\n        style: styles.subsButton,\n        onClick: function onClick() {\n          _this3.subscribe(_this3.props.company, _this3.props.item);\n        },\n        plain: true\n      }, React.createElement(IoIosStar, null), Lang.translate('SUBSCRIBE')), React.createElement(Modal, {\n        isOpen: this.state.showModal // onAfterOpen={() => {this.getQrCode(item)}}\n        ,\n        onRequestClose: function onRequestClose() {\n          _this3.setState({\n            showModal: false\n          });\n        },\n        style: customStyles,\n        contentLabel: \"Example Modal\"\n      }, React.createElement(\"div\", {\n        style: styles.qrTitle\n      }, \"\\u626B\\u7801\\u5173\\u6CE8\\u8BE5\\u516C\\u53F8\"), React.createElement(\"div\", {\n        style: styles.qrTitle\n      }, React.createElement(\"small\", null, \"\\u5C06\\u66F4\\u53CA\\u65F6\\u7684\\u6536\\u5230\\u63A8\\u9001\")), React.createElement(\"img\", {\n        style: styles.qrcode,\n        src: this.state.qrUrl\n      })), React.createElement(Toast, {\n        icon: \"success-no-circle\",\n        show: this.state.success\n      }, \"Success\"), React.createElement(Toast, {\n        icon: \"loading\",\n        show: this.state.loading\n      }, \"Loading...\"));\n    }\n  }]);\n\n  return SubscribeBtn;\n}(React.Component);\n\nvar styles = {\n  subsButton: {\n    borderColor: 'red',\n    color: 'red',\n    marginTop: 5 // padding: '2vw',\n\n  },\n  qrcode: {\n    width: '100%'\n  },\n  qrTitle: {\n    width: '100%',\n    textAlign: 'center'\n  }\n};\nexport default SubscribeBtn;","map":null,"metadata":{},"sourceType":"module"}